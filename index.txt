from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
import sqlite3
import os
from datetime import datetime
import pdfplumber
from bs4 import BeautifulSoup
import requests
import ollama
from ollama import chat
from datetime import datetime
import traceback
sqlite3.register_adapter(datetime, lambda dt: dt.isoformat())
import uuid

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'your-secret-key')
DATABASE = 'policy_chatbot.db'


def init_db():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT NOT NULL,
            login_timestamp DATETIME,
            failed_attempts INTEGER DEFAULT 0
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filename TEXT NOT NULL,
            filetype TEXT NOT NULL,
            filesize INTEGER NOT NULL,
            upload_timestamp DATETIME,
            uploaded_by INTEGER,
            FOREIGN KEY(uploaded_by) REFERENCES users(id)
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS api_keys (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            api_key TEXT NOT NULL,
            purpose TEXT,
            issuance_timestamp DATETIME,
            FOREIGN KEY(client_id) REFERENCES users(id)
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_query TEXT,
            ai_response TEXT,
            timestamp DATETIME,
            feedback_score INTEGER,
            feedback_comment TEXT,
            response_id TEXT
        )''')
        conn.commit()

@app.route('/')
def home():
    return render_template('home.html')

def hash_password(password):
    import hashlib
    return hashlib.sha256(password.encode()).hexdigest()

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = hash_password(password)
        
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, hashed_password))
            user = c.fetchone()
            if not user:
                c.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
                user = c.fetchone()
                if user:
                    c.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user[0]))
                    conn.commit()
            
            if user:
                c.execute('UPDATE users SET login_timestamp = ? WHERE id = ?', (datetime.now(), user[0]))
                conn.commit()
                flash(f'Welcome, {username}!', 'success')
                if user[3] == 'admin':
                    return redirect(url_for('admin_dashboard'))
                elif user[3] == 'client':
                    return redirect(url_for('client_dashboard'))
            else:
                c.execute('UPDATE users SET failed_attempts = failed_attempts + 1 WHERE username = ?', (username,))
                conn.commit()
                flash('Invalid credentials', 'danger')
        return redirect(url_for('login'))
    return render_template('login.html')

@app.route('/admin/dashboard')
def admin_dashboard():
    return render_template('admin_dashboard.html')

@app.route('/admin/upload', methods=['GET', 'POST'])
def admin_upload():
    if request.method == 'POST':
        file = request.files['document']
        if file and file.filename.endswith(('.pdf', '.docx')):
            filesize = len(file.read())
            file.seek(0)
            filename = file.filename
            filetype = filename.split('.')[-1]
            upload_time = datetime.now()
            os.makedirs('uploads', exist_ok=True)
            file.save(os.path.join('uploads', filename))
            with sqlite3.connect(DATABASE) as conn:
                c = conn.cursor()
                c.execute('INSERT INTO documents (filename, filetype, filesize, upload_timestamp, uploaded_by) VALUES (?, ?, ?, ?, ?)',
                         (filename, filetype, filesize, upload_time, 1))
                conn.commit()
            flash('Document uploaded successfully')
        else:
            flash('Invalid file type')
        return redirect(url_for('admin_upload'))
    return render_template('admin_upload.html')

@app.route('/admin/documents')
def admin_documents():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute('SELECT filename, filetype, filesize, upload_timestamp FROM documents')
        documents = c.fetchall()
    return render_template('admin_documents.html', documents=documents)

@app.route('/admin/analytics')
def admin_analytics():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute('SELECT user_query, ai_response, feedback_score, feedback_comment FROM interactions')
        interactions = c.fetchall()
    return render_template('admin_analytics.html', interactions=interactions)

@app.route('/client/dashboard')
def client_dashboard():
    return render_template('client_dashboard.html')

@app.route('/client/api_key', methods=['GET', 'POST'])
def client_api_key():
    if request.method == 'POST':
        purpose = request.form['purpose']
        api_key = os.urandom(16).hex()
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute('INSERT INTO api_keys (client_id, api_key, purpose, issuance_timestamp) VALUES (?, ?, ?, ?)',
                     (1, api_key, purpose, datetime.now()))
            conn.commit()
        flash(f'API Key generated: {api_key}')
        return redirect(url_for('client_api_key'))
    return render_template('client_api_key.html')



@app.route('/chat', methods=['GET', 'POST'])
def chat():
    
if __name__ == "__main__":
    app.run(debug=True)
    
    